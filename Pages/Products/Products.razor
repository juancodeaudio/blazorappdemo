@page "/product"
@inject ILogger<Products> logger
@inject IProductService productService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<PageTitle>Products</PageTitle>

<ModuleTitle Title="Products" />

<button class="btn btn-dark" @onclick="@(() => navigationManager.NavigateTo("addproduct"))">Add Product</button>

<style>
    .products-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, 280px);
        grid-auto-rows: auto;
        grid-gap: 1rem;
    }
</style>

@if(products.Count > 0)
{
    <div class="products-container">
        @foreach (var product in products)
        {
            <div class="card">
                <img class="card-img-top" src="@product.Images[0]" alt="Product" loading="lazy" width="270" height="210" />
                <div class="card-body">
                    <h4><b>@product.Title</b></h4>
                    <p>@product.Price?.ToString("C")</p>
                    <button title="Delete" class="btn btn-danger btn-delete" @onclick="@(() => DeleteProduct(product))"><span class="oi oi-trash"></span></button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No products found</p>
}

@code
{
    private List<Product> products;

    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
    }
    private async Task GetProducts()
    {
        products = await productService.GetProductsAsync();
    }

    private async Task DeleteProduct(Product product)
    {
        if(!await jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {product.Title}?"))
        {
            return;
        }
        await productService.DeleteProductAsync(product.Id);
        await GetProducts();
    }
}